/*
写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。



首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1)
或 INT_MIN (−231) 。
*/

class Solution {
public:
    int strToInt(string str)
    {
        int i = 0;
        // 去除首尾空格
        while (i < str.size() && str[i] == ' ') { ++i; }

        // 正负标识
        int flag = 1;

        // 找到标志位
        if (i < str.size() && (str[i] == '+' || str[i] == '-')) {
            flag = str[i] == '-' ? -1 : 1;
            ++i;
        }

        int num = 0;  // 结果

        // 找到结尾或不为数字结束
        while (i < str.size() && isdigit(str[i])) {
            // 当前位转化为数字
            int iNum = str[i] - '0';

            // 大于最大值返回最大值
            if (flag == 1 && num > (INT_MAX - iNum) / 10) {
                return INT_MAX;
            }
            // 小于最小值返回最小值
            else if (flag == -1 && num < (INT_MIN + iNum) / 10) {
                return INT_MIN;
            }

            // 更新结果
            num = num * 10 + iNum * flag;
            ++i;
        }

        return num;
    }
};
